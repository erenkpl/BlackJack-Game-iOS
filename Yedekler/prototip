
//
//  ContentView.swift
//  BlackJack
//
//  Created by Eren Küpeli on 3.01.2024.
//

import SwiftUI

extension Animation {
    static func ripple(index: Int) -> Animation {
        Animation.spring(dampingFraction: 0.5)
            .speed(2)
            .delay(0.03 * Double(index))
    }
}

struct ScaleButtonStyle: ButtonStyle {
    func makeBody(configuration: Self.Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 1.2 : 1)
    }
}

var para : Double = 100
var bahis : Double = 0
var bahisMiktarı : Double = 0
var ilkeldenetimi = true

struct ContentView: View {
    @State var check = false
    @State var animasyon = 2.0
    @State var selected = false
    var body: some View{
        NavigationView{
            ZStack{
                VStack{
                    if check{
                        OyunEkrani().transition(AnyTransition.scale.animation(.easeInOut(duration: 0.3).delay(0.5)))
                    }
                    if !check{
                        Button("Giriş"){
                            withAnimation(.easeIn(duration: 0.3)){
                                animasyon += 1
                                selected.toggle()
                                check = true
                            }
                        }
                        .padding(35)
                        .background(Image("Background").resizable())
                        .foregroundColor(.white)
                        .clipShape(Circle())
                        .shadow(radius: 20)
                        .buttonStyle(ScaleButtonStyle())
                        .scaleEffect(selected ? 14 : 1)
                        .animation(.ripple(index: 1).delay(0.1))
                    }
                } //Vstack sonu
            } //Zstack sonu
        }
    }
}

struct OyunEkrani: View {
    
    @AppStorage("para") var para : Double = 100
    @AppStorage("bahis") var bahis : Double = 0
    @State var bahisMiktarı : Double = 0
    @State var ilkeldenetimi = true
    @State var girischeck : Bool = false
    @State var animasyon = 2.0
    @State var selected = false
    
    var body: some View {
        ZStack{
            Image("Background")
                .resizable()
                .ignoresSafeArea()
            if girischeck{
                Giris().transition(AnyTransition.scale.animation(.easeInOut(duration: 0.3).delay(0.5)))
            }
            else{
                VStack{
                    Text("Banka")
                        .font(.title2)
                        .bold()
                        .foregroundColor(.white)
                        .position(CGPoint(x: 305.0, y: -20.0))
                        .padding()
                    Text("Para: " + String(Int(para)))
                        .font(.title3)
                        .italic()
                        .foregroundColor(.white)
                        .offset(x: 125, y: -695)
                    Text("Lütfen Bahsinizi Belirleyin")
                        .font(.title2)
                        .italic()
                        .foregroundColor(.gray)
                        .offset(y: -360)
                }
                HStack{
                    Image("chips1")
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 70)
                        .overlay(Button("25", action: {
                            bahisMiktarı = 25
                            paraEkle()
                        }).padding(15).font(.title3)).foregroundColor(.white).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.8 : 0)).shadow(radius: 10)
                    Image("chips2").resizable().aspectRatio(contentMode: .fit)
                        .frame(width: 70)
                        .overlay(Button("50", action: {
                            bahisMiktarı = 50
                            paraEkle()
                        }).padding(15)
                            .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.9 : 0)).shadow(radius: 10)
                    
                    Image("chips3").resizable().aspectRatio(contentMode: .fit)
                        .frame(width: 70)
                        .overlay(Button("100", action: {
                            bahisMiktarı = 100
                            paraEkle()
                        }).padding(15)
                            .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.9 : 0)).shadow(radius: 10)
                    
                    Image("chips4").resizable().aspectRatio(contentMode: .fit)
                        .frame(width: 70)
                        .overlay(Button("500", action: {
                            bahisMiktarı = 500
                            paraEkle()
                        }).padding(15)
                            .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.9 : 0)).shadow(radius: 10)
                }.offset(y: 300)
                Button("Bet", action: {
                    withAnimation(.easeIn(duration: 0.3)){
                        animasyon += 1
                        selected.toggle()
                        girischeck.toggle()
                    }
                })
                .padding(20)
                .background(.purple)
                .foregroundColor(.white)
                .clipShape(Circle())
                .shadow(radius: 20)
                .buttonStyle(ScaleButtonStyle())
                .scaleEffect(selected ? 14 : 1)
                .animation(.ripple(index: 1).delay(0.1))
                .offset(y:370)
            }
        }
    }
    
    func paraEkle (){
        bahis = bahis + bahisMiktarı
        para = para - bahisMiktarı
    }
}


struct Giris : View{
    
    @State var playerCard1 = "Arka"
    @State var playerCard2 = "Arka"
    @State var playerCard3 = ""
    @State var playerCard4 = ""
    @State var playerCard5 = ""
    @State var cpuCard1 = "Arka"
    @State var cpuCard2 = "Arka"
    @State var cpuCard3 = ""
    @State var cpuCard4 = ""
    @State var cpuCard5 = ""
    
    @State var playerScore = 0
    @State var cpuScore = 0
    
    @State var playerPuan = 0
    @State var cpuPuan = 0
    
    @State var playeras = 0
    @State var cpuas = 0
    @State var cpuastoggle : Bool = false
    @State var playerastoggle : Bool = false
    
    @AppStorage("para") var para : Double = 100
    @AppStorage("bahis") var bahis : Double = 0
    
    @State var elSayisi = 0
    @State var ilkeldenetimi = true
    
    @State var whoWin = ""
    
    @State var showAlert = false
    
    @State var offset: CGFloat = -300
    
    @State var viewChecker = false
    
    @State var bekleme = false
    
    @State var animasyon = 2.0
    
    let cardType = ["k", "l", "m", "n", "x", "p"]
    
    var body: some View {
        
        NavigationView{
            ZStack{
                Image("Background")
                    .resizable()
                    .ignoresSafeArea()
                if viewChecker{
                    OyunEkrani()
                }
                else{
                    VStack{
                        
                        Text("CPU")
                            .font(.title)
                            .foregroundColor(.white)
                        // Cpu kartları için.
                        HStack{
                            Image(cpuCard1)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.5 : 0))
                            Image(cpuCard2)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.7 : 0))
                            Image(cpuCard3)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 80)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1))
                                .overlay(Image(cpuCard4)
                                    .resizable()
                                    .frame(width: 80)
                                    .shadow(radius: 20)
                                    .offset(CGSize(width: 10.0, height: 10.0))
                                    .animation(.ripple(index: 1)))
                                    .overlay(Image(cpuCard5)
                                        .resizable()
                                        .frame(width: 80)
                                        .shadow(radius: 20)
                                        .offset(CGSize(width: 20.0, height: 20.0))
                                        .animation(.ripple(index: 1)))
                        }
                        if !ilkeldenetimi{
                            Text("CPU Score: " + String(cpuScore))
                                .font(.title2)
                            Text("Player Score: " + String(playerScore))
                                .font(.title2)
                        }
                        Text("Para: " + String(Int(para)))
                            .font(.title3)
                            .animation(.default.delay(0))

                        Text("Player")
                            .font(.title)
                            .foregroundColor(.white)
                        
                        // Player kartları için
                        
                        HStack{
                            Image(playerCard1)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.9 : 0))
                            Image(playerCard2)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1).delay(ilkeldenetimi ? 2.1 : 0))
                            Image(playerCard3)
                                .resizable()
                                .aspectRatio(contentMode: .fit)
                                .frame(width: 80)
                                .shadow(radius: 20)
                                .animation(.ripple(index: 1))
                                .overlay(Image(playerCard4)
                                    .resizable()
                                    .frame(width: 80)
                                    .shadow(radius: 20)
                                    .offset(CGSize(width: 10.0, height: 10.0))
                                    .animation(.ripple(index: 1)))
                                    .overlay(Image(playerCard5)
                                        .resizable()
                                        .frame(width: 80)
                                        .shadow(radius: 20)
                                        .offset(CGSize(width: 20.0, height: 20.0))
                                        .animation(.ripple(index: 1)))
                        }
                        Text("CPU Puan: " + String(cpuPuan))
                            .font(.title3)
                            .foregroundColor(.yellow)
                        Text("Player Puan: " + String(playerPuan))
                            .font(.title3)
                            .foregroundColor(.yellow)
                        
                        // Butonlar için
                        Spacer()
                        HStack{
                            Text("Bahis: " + String(Int(bahis)))
                                .font(.title3)
                                .foregroundStyle(.purple)
                                .animation(.default.delay(0))
                        }
                        HStack{
                            if elSayisi == 0{
                                Button("Başla", action: initi).padding(15)
                                    .font(.title).foregroundColor(.white).background(.gray)
                                    .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.8 : 0))
                            }
                            else{
                                Button("Çek", action: kartAl).padding(15)
                                    .font(.title).foregroundColor(.white).background(.green)
                                    .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.9 : 0))
                                Button("Bekle", action: bekle).padding(15)
                                    .font(.title).foregroundColor(.white).background(.red)
                                    .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.0 : 0))
                                /*Button("Sıfır", action: sifirla).padding(15)
                                    .font(.title).foregroundColor(.white).background(.purple)
                                    .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.1 : 0))*/
                            }
                        }
                    } //Vstack Sonu
                    .animation(.smooth.delay(ilkeldenetimi ? 0.7 : 0))
                    .offset(x: offset)
                        .onAppear(perform: {
                            withAnimation(.linear(duration: 10).repeatForever()) {
                                offset = 0
                            }
                        })
                }
            } // ZStack sonu
            .alert(isPresented: self.$showAlert,
                           content: { self.notificationReminder() })
        }
    }
    
    func asControl (num : Int, who : String){
        print("girdi")
        var tempPlayer = 0
        var tempCpu = 0
        
        tempPlayer = playerScore + num
        tempCpu = cpuScore + num
        
        if who == "p" && playerastoggle{
            print("playera girdi")
            if tempPlayer > 21{
                print("en içe girdi")
                playerScore -= 10
                playerastoggle.toggle()
            }
        }
        else if who == "c" && cpuastoggle{
            print("cpuya girdi")
            if tempCpu > 21{
                cpuScore -= 10
                cpuastoggle.toggle()
            }
        }
    }
    
    func cardRandomizer(score: String) -> String{
        var temp = ""
        var num = 0
        temp = cardType.randomElement()!
        func numberRandomizer()-> Int{
            if temp == "k" || temp == "l" || temp == "m" || temp == "n"{
                num = Int.random(in: 2...10)
                if score == "p"{
                    if playeras > 0{
                        asControl(num: num, who: "p")
                    }
                    playerScore += num
                }
                else{
                    if cpuas > 0{
                        asControl(num: num, who: "c")
                    }
                    cpuScore += num
                }
            }
            if temp == "x"{
                num = Int.random(in: 1...4)
                if (playeras + cpuas) < 5{
                    if score == "p"{
                        if playerScore < 11{
                            playerScore += 11
                            playeras += 1
                            playerastoggle.toggle()
                        }
                        else{
                            if playeras > 0{
                                asControl(num: 1, who: "p")
                            }
                            playerScore += 1
                            playeras += 1
                        }
                    }
                    else{
                        if cpuScore < 11{
                            cpuScore += 11
                            cpuas += 1
                            cpuastoggle.toggle()
                        }
                        else{
                            if cpuas > 0{
                                asControl(num: 1, who: "c")
                            }
                            cpuScore += 1
                            cpuas += 1
                        }
                    }
                }
            }
            if temp == "p"{
                num = Int.random(in: 1...12)
                if score == "p"{
                    if playeras > 0{
                        asControl(num: 10, who: "p")
                    }
                    playerScore += 10
                }
                else{
                    if cpuas > 0{
                        asControl(num: 10, who: "c")
                    }
                    cpuScore += 10
                }
            }
            return num
        }
        return temp + String(numberRandomizer())
    }
    
    func kartDagit(){
        if elSayisi == 1{
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1){
                cpuCard1 = cardRandomizer(score: "c")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2){
                playerCard1 = cardRandomizer(score: "p")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                playerCard2 = cardRandomizer(score: "p")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                check()
            }
        }
    }
    
    func check(){
        if playerScore == 21{
            winner()
        } else if cpuScore == 21{
            winner()
        }
    }
    
    func initi(){
        if elSayisi == 0{
            ilkeldenetimi = false
            elSayisi = 1
            kartDagit()
        }
        else{
            sifirla()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                initi()
            }
        }
    }
    
    func kartAl(){
        if elSayisi > 0{
            elSayisi = elSayisi+1
            checkPlayer3rd()
        }
    }
    func bekle(){
        bekleme = true
        if elSayisi > 0{
            if cpuCard2 == "Arka"{
                cpuCard2 = cardRandomizer(score: "c")
                elSayisi += 1
            }
            elSayisi = elSayisi+1
            if cpuScore == playerScore && cpuScore > 16{
                winner()
            }
            else if playerScore < cpuScore && cpuScore < 22{
                winner()
            }
            else if cpuScore < 17{
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.4){
                    checkCpu3rd()
                    bekle()
                }
            }
            else{
                winner()
            }
        }
    }
    
    func sifirla(){
        playerCard1 = "Arka"
        playerCard2 = "Arka"
        playerCard3 = ""
        playerCard4 = ""
        playerCard5 = ""
        cpuCard1 = "Arka"
        cpuCard2 = "Arka"
        cpuCard3 = ""
        cpuCard4 = ""
        cpuCard5 = ""
        playerScore = 0
        cpuScore = 0
        elSayisi = 0
        playeras = 0
        cpuas = 0
        bahis = 0
    }
    
    func checkCpu3rd(){
        if cpuCard3 == "" {
            cpuCard3 = cardRandomizer(score: "c")
        }
        else if cpuCard4 == "" {
            cpuCard4 = cardRandomizer(score: "c")
        }
        else{
            cpuCard5 = cardRandomizer(score: "c")
        }
    }
    
    func checkPlayer3rd(){
        if playerCard3 == "" {
            playerCard3 = cardRandomizer(score: "p")
        }
        else if playerCard4 == "" {
            playerCard4 = cardRandomizer(score: "p")
        }
        else{
            playerCard5 = cardRandomizer(score: "p")
        }
        if playerScore<22 && elSayisi > 1{
            //
        }
        else if playerScore == 21{
            check()
        }
        else{
            winner()
        }
    }

    func winner(){
        if cpuCard2 == "Arka"{
            cpuCard2 = cardRandomizer(score: "c")
        }
        // 21 yapma kontrolü
        if playerScore == cpuScore && cpuScore == 21{
            whoWin = ""
            showAlert = true
        }
        else if playerScore == 21{
            whoWin = "Player"
            paraCheck(no: 5)
            showAlert = true
        }
        else if cpuScore == 21{
            whoWin = "Cpu"
            paraCheck(no: 6)
            showAlert = true
        }
        // 21 geçme kontrolü
        else if cpuScore > 21{
            whoWin = "Player"
            paraCheck(no: 3)
            showAlert  = true
        }
        else if playerScore > 21{
            whoWin = "Cpu"
            paraCheck(no: 4)
            showAlert  = true
        }
        else{
            if cpuScore > 16{
                if playerScore > cpuScore && playerScore < 22{
                    whoWin = "Player"
                    paraCheck(no: 1)
                    showAlert = true
                }
                else if cpuScore > playerScore && cpuScore < 22{
                    whoWin = "Cpu"
                    paraCheck(no: 2)
                    showAlert = true
                }
                else if cpuScore == playerScore{
                    whoWin = ""
                    showAlert = true
                }
                else{
                    whoWin = "Hata!"
                    showAlert = true
                }
            }
            else if bekleme{
                if playerScore < cpuScore{
                    whoWin = "Cpu"
                    paraCheck(no: 2)
                    showAlert = true
                }
                else{
                    whoWin = "Player"
                    paraCheck(no: 1)
                    showAlert = true
                }
            }
        }
    }
    
    func paraCheck(no durum: Int){
        if durum == 1{
            playerPuan = playerPuan + 1
            para = para + (bahis * 2)
        }
        else if durum == 2{
            cpuPuan = cpuPuan + 1
        }
        else if durum == 3{
            playerPuan = playerPuan + 1
            para = para + (bahis * 1.5)
        }
        else if durum == 4{
            cpuPuan = cpuPuan + 1
        }
        else if durum == 5{
            playerPuan = playerPuan + 1
            para = para + (bahis * 5)
        }
        else if durum == 6{
            cpuPuan = cpuPuan + 1
        }
    }
    
    func viewChanger(){
        viewChecker.toggle()
    }
    
    func notificationReminder() -> Alert {
        if whoWin == "Player"{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Player kazandı. \nPlayer score " + String(playerScore) + "\nCpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: sifirla
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChanger
                        ))
        }
        else if whoWin == "Cpu"{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Cpu kazandı. \nPlayer score " + String(playerScore) + "\nCpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: sifirla
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChanger
                        ))
        }
        else if para == 0 || para < 0{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Para Bitti!"),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: sifirla
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChanger
                        ))
        }
        else{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Berabere \nPlayer score " + String(playerScore) + "\ncpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: sifirla
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChanger
                        ))
        }
    }
}

#Preview {
    ContentView()
}
