//
//  GameScreen.swift
//  BlackJack
//
//  Created by Eren Küpeli on 4.01.2024.
//

import SwiftUI

struct GameScreen : View{
    @State var bahiskontrol : Bool = true
    @EnvironmentObject var g : GlobalVariables
    
    // Chip'leri initialize ettik.
    @State var chip1 : Bool = false
    @State var chip2 : Bool = false
    @State var chip3 : Bool = false
    @State var chip4 : Bool = false
    
    // Chip'lerin ne kadar kullanildigini anlamak icin, her biri icin count tanimladik.
    @State var chip1count = 0
    @State var chip2count = 0
    @State var chip3count = 0
    @State var chip4count = 0
    
    // Kartlari initialize ettik.
    @State var playerCard1 = "Arka"
    @State var playerCard2 = "Arka"
    @State var playerCard3 = "Arka"
    @State var playerCard4 = "Arka"
    @State var playerCard5 = "Arka"
    @State var cpuCard1 = "Arka"
    @State var cpuCard2 = "Arka"
    @State var cpuCard3 = "Arka"
    @State var cpuCard4 = "Arka"
    @State var cpuCard5 = "Arka"
    
    @AppStorage("para") var para : Double = 100 //Paranin kayitli kalmasi icin AppStorage type'inda tanimladik.
    
    // Eldeki mevcut kartlarin toplam puani için score ogelerini tanimladik.
    @State var playerScore = 0
    @State var cpuScore = 0
    
    // Kazanan ve kaybeden puanlari icin puan ogelerini tanimladik.
    @State var playerPuan = 0
    @State var cpuPuan = 0
    
    @State var elSayisi = 0 //Toplamda oynanan el sayilarini tuttugumuz variable.
    @State var ilkeldenetimi = true
    
    @State var whoWin = "" //Kimin kazandigini tuttugumuz variable.
    
    @State var showAlert = false //Oyun sonu gosterilecek ekran kontrolu icin.
    
    @State var offset: CGFloat = -300 // Animasyonlar icin tanimli offset degeri.
    
    @State var viewChecker = "" // Oyun sonu ekraninda view degistirmek icin variable.
    
    @State var bekleme = false // Bekle tusu kontrol variable'i.
    
    @State var kartDenetimi : Bool = false // Animasyonlar icin kartin gelip gelmedigi kontrolu.
    @State var animasyonDenetimi : Bool = false // Animasyonun baslayip baslamadigi kontrolu.
    
    @State var cardType = ["k", "l", "m", "n", "p", "x"]
    @State var cardK = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    @State var cardL = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    @State var cardM = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    @State var cardN = [2, 3, 4, 5, 6, 7, 8, 9, 10]
    @State var cardP = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    @State var cardX = [1, 2, 3, 4]
    
    @State var playerAS : Bool = false
    @State var cpuAS : Bool = false
    
    var body: some View {
        
        NavigationView{
            ZStack{
                Image("Background")
                    .resizable()
                    .ignoresSafeArea()
                
                HStack(alignment: .firstTextBaseline, content: {
                    Text("Banka")
                        .font(.title2)
                        .bold()
                        .foregroundColor(.white)
                        .position(CGPoint(x: 305.0, y: 0.0))
                        .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.3 : 0))
                        .padding()
                    Text("Para: " + String(Int(g.para)))
                        .font(.title3)
                        .italic()
                        .foregroundColor(.white)
                        .offset(x : -10, y : 25)
                        .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.3 : 0))
                        .padding()
                })
                
                HStack{
                    // Cpu kartları için.
                    Image(cpuCard1)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 100)
                        .shadow(radius: 20)
                        .offset(x : kartDenetimi ? -60 : 265, y: kartDenetimi ? -220 : -90)
                        .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.3 : 0))
                        .overlay(Image(cpuCard2)
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                            .frame(width: 100)
                            .shadow(radius: 20)
                            .offset(x : kartDenetimi ? 45 : 270, y: kartDenetimi ? -220 : -90)
                            .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.5 : 0)))
                    Image(cpuCard3)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 100)
                        .shadow(radius: 20)
                        .offset(x : cpuCard3 == "Arka" ? 165 : 42, y : cpuCard3 == "Arka" ? -90 : -220)
                        .animation(.ripple(index: 1))
                        .overlay(Image(cpuCard4)
                            .resizable()
                            .frame(width: 100)
                            .shadow(radius: 20)
                            .offset(x : cpuCard4 == "Arka" ? 170 : 42, y : cpuCard4 == "Arka" ? -90 : -220)
                            .offset(CGSize(width: cpuCard4 == "Arka" ? 0.0 : 10.0, height: cpuCard4 == "Arka" ? 0.0 : 10.0))
                            .animation(.ripple(index: 1)))
                            .overlay(Image(cpuCard5)
                                .resizable()
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .offset(x : cpuCard5 == "Arka" ? 175 : 42, y : cpuCard5 == "Arka" ? -90 : -220)
                                .offset(CGSize(width: cpuCard5 == "Arka" ? 0.0 : 20.0, height: cpuCard5 == "Arka" ? 0.0 : 20.0))
                                .animation(.ripple(index: 1)))
                }
                
                // Player kartları için
                
                HStack{
                    Image(playerCard1)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 100)
                        .shadow(radius: 20)
                        .offset(x : kartDenetimi ? -60 : 265, y: kartDenetimi ? 40 : -90)
                        .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.7 : 0))
                        .overlay(Image(playerCard2)
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                            .frame(width: 100)
                            .shadow(radius: 20)
                            .offset(x : kartDenetimi ? 45 : 270, y: kartDenetimi ? 40 : -90)
                            .animation(.ripple(index: 1).delay(animasyonDenetimi ? 0.9 : 0)))
                    Image(playerCard3)
                        .resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(width: 100)
                        .shadow(radius: 20)
                        .offset(x : playerCard3 == "Arka" ? 165 : 42, y : playerCard3 == "Arka" ? -90 : 40)
                        .animation(.ripple(index: 1))
                        .overlay(Image(playerCard4)
                            .resizable()
                            .frame(width: 100)
                            .shadow(radius: 20)
                            .offset(x : playerCard4 == "Arka" ? 170 : 42, y : playerCard4 == "Arka" ? -90 : 40)
                            .offset(CGSize(width: playerCard4 == "Arka" ? 0.0 : 10.0, height: playerCard4 == "Arka" ? 0.0 : 10.0))
                            .animation(.ripple(index: 1)))
                            .overlay(Image(playerCard5)
                                .resizable()
                                .frame(width: 100)
                                .shadow(radius: 20)
                                .offset(x : playerCard5 == "Arka" ? 175 : 42, y : playerCard5 == "Arka" ? -90 : 40)
                                .offset(CGSize(width: playerCard5 == "Arka" ? 0.0 : 20.0, height: playerCard5 == "Arka" ? 0.0 : 20.0))
                                .animation(.ripple(index: 1)))
                }
                
                if viewChecker == "Content"{
                    ContentView()
                }
                else{
                    if bahiskontrol{
                        VStack{
                            Spacer()
                            Text("Lütfen Bahsinizi Belirleyin")
                                .font(.title2)
                                .italic()
                                .foregroundColor(.gray)
                                .offset(y: -220)
                            Text("Bahis: " + String(Int(g.bahis)))
                                .font(.title3)
                                .foregroundStyle(.purple)
                                .animation(.default.delay(0))
                            HStack{
                                if chip1{
                                    if chip1count == 1{
                                        chipimage(chip: "chips1").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20)
                                    }
                                    else{
                                        chipimage(chip: "chips1").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20).overlay(ForEach(2...chip1count, id: \.self){i in
                                                chipimage(chip: "chips1").resizable().aspectRatio(contentMode: .fit)
                                                    .frame(width: 40).shadow(radius: 20).offset(CGSize(width: 3 * i, height: 3 * i))
                                            })
                                    }
                                }
                                if chip2{
                                    if chip2count == 1{
                                        chipimage(chip: "chips2").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20)
                                    }
                                    else{
                                        chipimage(chip: "chips2").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20).overlay(ForEach(2...chip2count, id: \.self){i in
                                                chipimage(chip: "chips2").resizable().aspectRatio(contentMode: .fit)
                                                    .frame(width: 40).shadow(radius: 20).offset(CGSize(width: 3 * i, height: 3 * i))
                                            })
                                    }
                                }
                                if chip3{
                                    if chip3count == 1{
                                        chipimage(chip: "chips3").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20)
                                    }
                                    else{
                                        chipimage(chip: "chips3").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20).overlay(ForEach(2...chip3count, id: \.self){i in
                                                chipimage(chip: "chips3").resizable().aspectRatio(contentMode: .fit)
                                                    .frame(width: 40).shadow(radius: 20).offset(CGSize(width: 3 * i, height: 3 * i))
                                            })
                                    }
                                }
                                if chip4{
                                    if chip4count == 1{
                                        chipimage(chip: "chips4").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20)
                                    }
                                    else{
                                        chipimage(chip: "chips4").resizable().aspectRatio(contentMode: .fit)
                                            .frame(width: 40).shadow(radius: 20).overlay(ForEach(2...chip4count, id: \.self){i in
                                                chipimage(chip: "chips4").resizable().aspectRatio(contentMode: .fit)
                                                    .frame(width: 40).shadow(radius: 20).offset(CGSize(width: 3 * i, height: 3 * i))
                                            })
                                    }
                                }
                            }
                            .padding()
                            HStack{
                                Image("chips1").resizable().aspectRatio(contentMode: .fit)
                                    .frame(width: 70)
                                    .shadow(radius: 20)
                                    .overlay(Button("25", action: {
                                        g.bahis += 25
                                        paraEkle(bahisMiktarı: 25)
                                        chip1 = true
                                        chip1count += 1
                                    }).padding(15).font(.title3)).foregroundColor(.white).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(0.8)).shadow(radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/)
                                
                                Image("chips2").resizable().aspectRatio(contentMode: .fit)
                                    .frame(width: 70)
                                    .shadow(radius: 20)
                                    .overlay(Button("50", action: {
                                        g.bahis += 50
                                        paraEkle(bahisMiktarı: 50)
                                        chip2 = true
                                        chip2count += 1
                                    }).padding(15)
                                        .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(0.9)).shadow(radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/)
                                
                                Image("chips3").resizable().aspectRatio(contentMode: .fit)
                                    .frame(width: 70)
                                    .shadow(radius: 20)
                                    .overlay(Button("100", action: {
                                        g.bahis += 100
                                        paraEkle(bahisMiktarı: 100)
                                        chip3 = true
                                        chip3count += 1
                                    }).padding(15)
                                        .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(1)).shadow(radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/)
                                
                                Image("chips4").resizable().aspectRatio(contentMode: .fit)
                                    .frame(width: 70)
                                    .shadow(radius: 20)
                                    .overlay(Button("500", action: {
                                        g.bahis += 500
                                        paraEkle(bahisMiktarı: 500)
                                        chip4 = true
                                        chip4count += 1
                                    }).padding(15)
                                        .font(.title3).foregroundColor(.white).buttonStyle(ScaleButtonStyle())).animation(.ripple(index: 1).delay(1.1)).shadow(radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/)
                            }
                            Button("Bet", action: bahisKontrolEt).padding(15)
                                .font(.title).foregroundColor(.white).background(.gray)
                                .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(1.3))
                        }
                        .animation(.smooth)
                        .offset(x: offset)
                            .onAppear(perform: {
                                withAnimation(.linear(duration: 10).repeatForever()) {
                                    offset = 0
                                }
                            })
                            .padding()
                    }
                    else{
                        VStack{
                            Text("CPU")
                                .font(.title)
                                .foregroundColor(.white)
                            
                            if !ilkeldenetimi{
                                Text("CPU Score: " + String(cpuScore))
                                    .font(.title2)
                                    .position(x:100)
                                Text("Player Score: " + String(playerScore))
                                    .font(.title2)
                                    .position(x:100)
                            }

                            Text("Player")
                                .font(.title)
                                .foregroundColor(.white)
                            
                            Text("CPU Puan: " + String(cpuPuan))
                                .font(.title3)
                                .foregroundColor(.yellow)
                            Text("Player Puan: " + String(playerPuan))
                                .font(.title3)
                                .foregroundColor(.yellow)
                            
                            // Butonlar için
                            
                            HStack{
                                Text("Bahis: " + String(Int(g.bahis)))
                                    .font(.title3)
                                    .foregroundStyle(.purple)
                                    .animation(.default.delay(0))
                            }
                            
                            HStack{
                                if elSayisi == 0{
                                    Button("Başla", action: initi).padding(15)
                                        .font(.title).foregroundColor(.white).background(.gray)
                                        .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.8 : 0))
                                }
                                else{
                                    Button("Çek", action: kartAl).padding(15)
                                        .font(.title).foregroundColor(.white).background(.green)
                                        .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 0.9 : 0))
                                    Button("Bekle", action: bekle).padding(15)
                                        .font(.title).foregroundColor(.white).background(.red)
                                        .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.0 : 0))
                                    /*Button("Sıfır", action: sifirla).padding(15)
                                        .font(.title).foregroundColor(.white).background(.purple)
                                        .clipShape(Circle()).shadow(radius: 5).buttonStyle(ScaleButtonStyle()).animation(.ripple(index: 1).delay(ilkeldenetimi ? 1.1 : 0))*/
                                }
                            }
                        } //Vstack Sonu
                        .animation(.smooth)
                        .offset(x: offset)
                            .onAppear(perform: {
                                withAnimation(.linear(duration: 10).repeatForever()) {
                                    offset = 0
                                }
                            })
                    }
                }
            } // ZStack sonu
            .alert(isPresented: self.$showAlert,
                           content: { self.notificationReminder() })
        }
    }
    
    func bahisKontrolEt(){
        bahiskontrol.toggle()
    }
    
    func chipimage(chip : String) -> Image{
        return Image(chip)
    }
    
    func cardRandomizer(score: String) -> String{
        var temp = ""
        var card = ""
        var num = 0
        temp = cardType.randomElement()!
        
        //Sinek kartlari icin
        if temp == "k"{
            if cardK.isEmpty{
                if let i = cardType.firstIndex(of: "k") {
                    cardType[i] = "Kout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardK.count-1))
                if score == "p"{
                    playerScore += cardK[num]
                }
                else{
                    cpuScore += cardK[num]
                }
                card = temp + String(cardK[num])
            }
            cardK.remove(at: num)
        }
        
        //Karo kartlari icin.
        if temp == "l"{
            if cardL.isEmpty{
                if let i = cardType.firstIndex(of: "l") {
                    cardType[i] = "Lout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardL.count-1))
                if score == "p"{
                    playerScore += cardL[num]
                }
                else{
                    cpuScore += cardL[num]
                }
                card = temp + String(cardL[num])
            }
            cardL.remove(at: num)
        }
        
        //Kupa kartlari icin.
        if temp == "m"{
            if cardM.isEmpty{
                if let i = cardType.firstIndex(of: "m") {
                    cardType[i] = "Mout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardM.count-1))
                if score == "p"{
                    playerScore += cardM[num]
                }
                else{
                    cpuScore += cardM[num]
                }
                card = temp + String(cardM[num])
            }
            cardM.remove(at: num)
        }
        
        // Maca kartlari icin.
        if temp == "n"{
            if cardN.isEmpty{
                if let i = cardType.firstIndex(of: "n") {
                    cardType[i] = "Nout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardN.count-1))
                if score == "p"{
                    playerScore += cardN[num]
                }
                else{
                    cpuScore += cardN[num]
                }
                card = temp + String(cardN[num])
            }
            cardN.remove(at: num)
        }
        
        //Ozel kartlar (K,Q,J) icin.
        if temp == "p"{
            if cardP.isEmpty{
                if let i = cardType.firstIndex(of: "p") {
                    cardType[i] = "Pout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardP.count-1))
                if score == "p"{
                    playerScore += 10
                }
                else{
                    cpuScore += 10
                }
                card = temp + String(cardP[num])
            }
            cardP.remove(at: num)
        }
        
        //As kartlari icin
        if temp == "x"{
            if cardX.isEmpty{
                if let i = cardType.firstIndex(of: "x") {
                    cardType[i] = "Xout"
                }
                temp = cardType.randomElement()!
            }
            else{
                num = Int.random(in: 0...(cardX.count-1))
                if score == "p"{
                    playerScore += 11
                    playerAS = true
                }
                else{
                    cpuScore += 11
                    cpuAS = true
                }
                card = temp + String(cardX[num])
            }
            cardX.remove(at: num)
        }
        
        if playerAS && playerScore > 21{
            playerScore -= 10
            playerAS = false
        }
        if cpuAS && cpuScore > 21{
            cpuScore -= 10
            cpuAS = false
        }
        
        return card
    }
    
    func kartDagit(){
        if elSayisi == 1{
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1){
                cpuCard1 = cardRandomizer(score: "c")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2){
                playerCard1 = cardRandomizer(score: "p")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                playerCard2 = cardRandomizer(score: "p")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                check()
            }
        }
    }
    
    func check(){
        if playerScore == 21{
            winner()
        } else if cpuScore == 21{
            winner()
        }
    }
    
    func initi(){
        kartDenetimi.toggle()
        animasyonDenetimi.toggle()
        if elSayisi == 0{
            ilkeldenetimi = false
            elSayisi = 1
            kartDagit()
        }
        else{
            sifirla()
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3){
                initi()
            }
        }
    }
    
    func kartAl(){
        if elSayisi > 0{
            elSayisi = elSayisi+1
            checkPlayer3rd()
        }
    }
    func bekle(){
        bekleme = true
        if elSayisi > 0{
            if cpuCard2 == "Arka"{
                animasyonDenetimi = false
                cpuCard2 = cardRandomizer(score: "c")
                elSayisi += 1
            }
            elSayisi = elSayisi+1
            if cpuScore == playerScore && cpuScore > 16{
                winner()
            }
            else if playerScore < cpuScore && cpuScore < 22{
                winner()
            }
            else if cpuScore < 17{
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.4){
                    checkCpu3rd()
                    bekle()
                }
            }
            else{
                winner()
            }
        }
    }
    
    func sifirla(){
        playerCard1 = "Arka"
        playerCard2 = "Arka"
        playerCard3 = "Arka"
        playerCard4 = "Arka"
        playerCard5 = "Arka"
        cpuCard1 = "Arka"
        cpuCard2 = "Arka"
        cpuCard3 = "Arka"
        cpuCard4 = "Arka"
        cpuCard5 = "Arka"
        playerScore = 0
        cpuScore = 0
        elSayisi = 0
        g.bahis = 0
        ilkeldenetimi = true
        bahiskontrol = true
        kartDenetimi = false
        chip1 = false
        chip2 = false
        chip3 = false
        chip4 = false
        chip1count = 0
        chip2count = 0
        chip3count = 0
        chip4count = 0
        cardType = ["k", "l", "m", "n", "p", "x"]
        cardK = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        cardL = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        cardM = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        cardN = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        cardP = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        cardX = [1, 2, 3, 4]
        playerAS = false
        cpuAS = false
    }
    
    func checkCpu3rd(){
        if cpuCard3 == "Arka" {
            cpuCard3 = cardRandomizer(score: "c")
        }
        else if cpuCard4 == "Arka" {
            cpuCard4 = cardRandomizer(score: "c")
        }
        else{
            cpuCard5 = cardRandomizer(score: "c")
        }
    }
    
    func checkPlayer3rd(){
        if playerCard3 == "Arka" {
            playerCard3 = cardRandomizer(score: "p")
        }
        else if playerCard4 == "Arka" {
            playerCard4 = cardRandomizer(score: "p")
        }
        else{
            playerCard5 = cardRandomizer(score: "p")
        }
        if playerScore<22 && elSayisi > 1{
            if playerScore == 21{
                check()
            }
        }
        else{
            winner()
        }
    }

    func winner(){
        animasyonDenetimi = false
        if cpuCard2 == "Arka"{
            cpuCard2 = cardRandomizer(score: "c")
        }
        // 21 yapma kontrolü
        if playerScore == cpuScore && cpuScore == 21{
            whoWin = ""
            showAlert = true
        }
        else if playerScore == 21{
            whoWin = "Player"
            paraCheck(no: 5)
            showAlert = true
        }
        else if cpuScore == 21{
            whoWin = "Cpu"
            paraCheck(no: 6)
            showAlert = true
        }
        // 21 geçme kontrolü
        else if cpuScore > 21{
            whoWin = "Player"
            paraCheck(no: 3)
            showAlert  = true
        }
        else if playerScore > 21{
            whoWin = "Cpu"
            paraCheck(no: 4)
            showAlert  = true
        }
        else{
            if cpuScore > 16{
                if playerScore > cpuScore && playerScore < 22{
                    whoWin = "Player"
                    paraCheck(no: 1)
                    showAlert = true
                }
                else if cpuScore > playerScore && cpuScore < 22{
                    whoWin = "Cpu"
                    paraCheck(no: 2)
                    showAlert = true
                }
                else if cpuScore == playerScore{
                    whoWin = ""
                    paraCheck(no: 7)
                    showAlert = true
                }
                else{
                    whoWin = "Hata!"
                    showAlert = true
                }
            }
            else if bekleme{
                if playerScore < cpuScore{
                    whoWin = "Cpu"
                    paraCheck(no: 2)
                    showAlert = true
                }
                else{
                    whoWin = "Player"
                    paraCheck(no: 1)
                    showAlert = true
                }
            }
        }
    }
    
    func paraCheck(no durum: Int){
        if durum == 1{
            playerPuan = playerPuan + 1
            para = para + (g.bahis * 2)
        }
        else if durum == 2{
            cpuPuan = cpuPuan + 1
        }
        else if durum == 3{
            playerPuan = playerPuan + 1
            para = para + (g.bahis * 1.5)
        }
        else if durum == 4{
            cpuPuan = cpuPuan + 1
        }
        else if durum == 5{
            playerPuan = playerPuan + 1
            para = para + (g.bahis * 5)
        }
        else if durum == 6{
            cpuPuan = cpuPuan + 1
        }
        else if durum == 7{
            para = para + g.bahis
        }
    }
    
    func viewChangerContent(){
        sifirla()
        viewChecker = "Content"
    }
    
    func viewChangerGiris(){
        sifirla()
        viewChecker = "Bahis"
    }
    
    func notificationReminder() -> Alert {
        if whoWin == "Player"{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Player kazandı. \nPlayer score " + String(playerScore) + "\nCpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: viewChangerGiris
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChangerContent
                        ))
        }
        else if whoWin == "Cpu"{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Cpu kazandı. \nPlayer score " + String(playerScore) + "\nCpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: viewChangerGiris
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChangerContent
                        ))
        }
        else if para == 0 || para < 0{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Para Bitti!"),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: viewChangerGiris
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChangerContent
                        ))
        }
        else{
            Alert(
                title: Text("Oyun Bitti"),
                message: Text("Berabere \nPlayer score " + String(playerScore) + "\ncpu score " + String(cpuScore)),
                primaryButton: .cancel(
                            Text("Tekrar Başla"),
                            action: viewChangerGiris
                        ),
                        secondaryButton: .destructive(
                            Text("Sıfırla"),
                            action: viewChangerContent
                        ))
        }
    }
}

#Preview {
    GameScreen()
}
